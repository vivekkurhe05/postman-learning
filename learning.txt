To set a collection variable
pm.collectionVariables.set("new_collection_variable_name",value)

To set an environment variable
pm.environment.set("new_environment_variable_name", value)

To get a collection variable
pm.collectionVariables.get("variable_name")

To get an environment variable
pm.environment.get("variable_name")

To call next request
postman.setNextRequest("Request name")

To get json data
pm.response.json()

To get reponse as a string
pm.response.text()

To get response details
pm.response

To access value from request payload
let req = JSON.parse(pm.request.body.raw)
let var_name = req.propertyname

This function allows you to send API calls. You need to specify the endpoint you are calling,
the request method that you want to use, and a callback function
pm.sendRequest({url: `url_here`, method:''}, callback_function)
e.g. 
pm.sendRequest({url:`${base_url}/blogposts/${post_id}`,method:'DELETE', function (err, response) {
    pm.test("Delete Response is OK", function() {
        pm.expect(response.status).to.eql('OK')
    })

    pm.test('Delete response body is empty', function() {
        pm.expect(response.json()).to.eql({})
    })
}})


==================================================================================================================

Assertions

pm.response.to.have.status(200)

let jsonData = pm.response.json()
pm.expect(jsonData).to.have.property("key")

pm.expect(jsonData.Msg).t0.eql("Msg")

pm.response.to.have.header("Content-Type")

pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json;charset=UTF-8")

pm.expect(pm.cookies.has('isLoggedIn')).to.be.true;

pm.expect(pm.cookies.get('isLoggedIn')).to.eql('1');

pm.expect(pm.response.responseTime).to.be.below(1200)

pm.expect(pm.response.text()).to.include("Book Already Exists")


const schema = {
  "properties": {
    "alpha": {
      "type": "boolean"
    }
  }
};
pm.response.to.have.jsonSchema(schema)

pm.expect(pm.response.code).to.eql(200)

pm.expect(pm.response.code).to.be.oneOf([200,201])

pm.expect(pm.environment.name).to.eql("Production")


Assert a value type

pm.expect(jsonData).to.be.an("object");
pm.expect(jsonData.name).to.be.a("string");
pm.expect(jsonData.age).to.be.a("number");
pm.expect(jsonData.hobbies).to.be.an("array");
pm.expect(jsonData.website).to.be.undefined;
pm.expect(jsonData.email).to.be.null;


Assert that value is in a set

/* Response has the following structure:
{
  "type": "Subscriber"
},
*/

pm.expect(pm.response.json().type).to.be.oneOf(["Subscriber", "Customer", "User"]);



/* Response has the following structure:
{
  "id": "d8893057-3e91-4cdd-a36f-a0af460b6373",
  "created": true,
  "errors": []
},
*/

const expectedObject = {
    "created": true,
    "errors": []
};

pm.expect(pm.response.json()).to.deep.include(expectedObject);




==================================================================================================================
Data Driven testing

To read heading name from csv file for data driven testing
pm.variables.replaceIn("{{heading_name}}")

or

pm.iterationData.get("heading_name")

==================================================================================================================
 Newman

newman run -h

to run collection
newman run exported_collectionName -e exported_environment

to run data driven test
newman run exported_collectionName -e exported_environment -d csv_filename

to generate report  
newman run exported_collectionName -e exported_environment -d csv_filename -r htmlextra

==================================================================================================================

References:
do this
https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/